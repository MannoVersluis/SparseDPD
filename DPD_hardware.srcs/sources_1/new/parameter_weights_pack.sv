
// this package contains the model parameters and weights

//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 12/05/2024 09:28:10 PM
// Design Name: 
// Module Name: backbones
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////

// IMPORTANT: the order of the layers in the code of the backbone is detemined based on what is defined first in the backbone,
        // make sure that this order is correct, or change the backbone if needed

package parameter_weights_pack;
    localparam int BACKBONE_LAYERS = 2; // amount of layers in the backbone,
        //not including the feature extraction layer, or the output layer that determines I and Q
    localparam int LAYER_SIZES [BACKBONE_LAYERS+1:0] = {2, 16, 16, 36}; // amount of neurons/outputs in each layer
    localparam int INPUTS_SIZE = 12;
    localparam int WEIGHTS_SIZE [1:BACKBONE_LAYERS+1] = '{BACKBONE_LAYERS+1{12}}; // is also the size of the bias
    localparam int ADDER_TREE [1:BACKBONE_LAYERS+1] = '{BACKBONE_LAYERS+1{1}};
    localparam int PARALLEL_INPUTS = 9;
    localparam string LAYER_BACKBONE = "pnfc_no_rnn_dense";
    localparam string FEATURE_EXTRACTION = "1_3_INV"; // to use abs2_4 or abs1_3 for feature augmentation
    localparam PHASE_NORMALIZATION = 1; // 1 for true, 0 for false
    localparam DENSE = 2; // 0 for no dense connection, 1 for sending FEx layer output to output layer input
    localparam string ACTIVATION_FUNCTION [1:BACKBONE_LAYERS] = '{BACKBONE_LAYERS{"RELU"}};
    logic signed [0:11] LAYER_FIRST_WEIGHT [0:15][0:35]  = '{'{62, -188, -15, 98, 264, -33, -1240, 605, -270, 13, -22, 43, 3, -191, 105, -84, 141, 199, 18, -15, 16, -4, 20, -30, -14, 421, -210, 66, -203, 82, 85, -134, -121, 88, 1165, -835}, '{46, -61, 179, -173, -258, -82, 66, 255, 436, 123, -39, -158, 278, -12, 155, -9, -133, 77, -121, 194, -57, 54, 38, 136, 350, 351, 59, -185, 259, 208, -240, 370, -185, 251, 180, 163}, '{48, -7, -42, 9, -3, 205, 272, 564, -512, -39, 27, -11, -18, -6, 31, 32, 6, -81, -9, 14, -18, 29, 5, -235, -37, 184, -829, 37, -9, -51, 37, 78, -3, -301, 236, 435}, '{63, -162, 52, 86, 56, -188, -367, 128, 249, 67, -61, -47, 153, -69, -57, -185, -741, -124, -25, 34, -66, 78, -32, -216, -320, 104, 80, 66, -90, 83, -69, 181, -189, -267, 621, -307}, '{85, 9, -80, 147, 108, 16, -31, -5, 57, 48, -10, -65, -74, 86, 74, 376, 530, 227, 83, -43, 19, -35, 44, 40, 23, -68, -157, 8, -84, 3, -126, -51, 350, 442, -29, -960}, '{-234, -11, 250, 58, -92, -147, 118, 227, -493, -55, -137, 38, 207, -135, 259, 144, 191, -142, 407, 0, 231, -16, 90, 449, 252, 8, -95, 40, 59, -30, -84, 199, -88, 205, -291, 327}, '{-310, 399, 36, -162, -222, 106, 84, 404, -4, 80, -256, 341, 40, -233, 222, 205, -201, -128, 201, -242, 115, 360, -358, 91, 140, 120, -423, -99, 17, 129, 134, 14, 179, -329, 66, 462}, '{229, -204, 1, -51, -255, 1, 297, 427, 233, 55, -99, -12, 7, -155, -1, -130, -396, -97, -118, 372, 44, -506, 111, 86, -15, 65, -26, 53, -110, 216, -65, 86, 43, 231, 70, 248}, '{-60, -62, -106, -50, -57, -118, 270, -47, 431, -118, -54, 121, 309, 275, 10, -552, -1158, 189, -23, 92, 101, -16, -199, -9, -7, 263, 213, 7, -121, 199, 0, -22, 43, -11, 160, 117}, '{101, -107, -80, 23, -50, 290, 276, 182, -30, 61, 21, 76, -453, 150, 542, 45, -58, 217, 48, -48, 86, -231, -94, -144, -88, 36, 21, -3, -201, 196, 133, 194, -280, -364, -57, 132}, '{13, -77, 85, -85, 64, 104, -748, -837, 389, 47, -32, -3, 72, 128, -54, -452, 345, -5, 33, -97, 83, -44, 81, -173, 178, 565, 160, 16, -25, -32, 115, 1, 79, -828, 1059, -1656}, '{28, -48, 164, -84, -128, 67, 203, -306, 885, 9, -7, 33, 15, 44, -131, 273, 388, 145, -13, 43, -91, 93, -9, -139, 92, -217, 738, 21, 11, -109, 89, 63, -251, 36, 200, 212}, '{192, -334, -334, -163, -313, -225, 471, 1019, 76, -102, 187, -35, -35, -198, -358, -64, 58, 230, 23, -318, -177, -276, -754, -841, -529, -1326, 151, 208, 89, -157, 218, 1143, 1149, -770, 661, -100}, '{-126, 107, -100, 25, 31, -65, -55, 371, 20, -166, 163, 161, -240, -250, -269, 83, -60, 216, 276, -171, -25, 421, 158, 66, -137, 293, 175, 223, 55, -256, -8, -155, -67, -60, 182, 19}, '{24, 91, -190, 157, -140, -168, 109, -128, 163, 101, -114, -51, -106, -13, 10, 4, -146, -196, -150, 39, 25, -118, -50, -19, 155, -221, -112, -33, -36, -119, 122, -94, 16, -139, 232, -139}, '{49, 119, 39, -215, 311, 37, -10, 42, 226, -43, 79, -122, 23, 187, -42, -605, -706, -136, -150, 21, -91, -61, 209, -59, 200, 335, 28, -33, 244, -81, 94, 193, -282, 126, 62, -51}};
    logic signed [0:11] LAYER_FIRST_BIAS [0:15]  = '{28, -31, -9, 0, -19, 87, 139, 201, 266, 1, -41, -13, 28, 15, -187, 271};
    localparam int LAYER_FIRST_WEIGHT_QUANTIZER   = -11;
    localparam int LAYER_FIRST_ACT_QUANTIZER   = -11;
    localparam int LAYER_FIRST_OUT_QUANTIZER   = -15;
    logic signed [0:11] LAYER_MID_WEIGHT [0:0][0:15][0:15]  = '{'{'{-1349, -61, -1653, -354, 431, -349, 100, 266, 431, 103, -51, -182, -603, 476, -68, 196}, '{-270, 2, 80, -182, -260, -36, 304, 296, -35, -528, -506, 224, 1780, -267, 212, -423}, '{351, 268, 17, 82, -147, -272, -251, 88, 149, -5, -115, -126, -207, -213, 232, -328}, '{227, 416, 70, 1149, 685, -331, -828, 80, 315, 1117, -177, 446, 1446, -179, 322, 423}, '{2, 36, 265, -85, -50, 555, 574, -244, 161, 391, -175, -702, 651, 94, 350, -157}, '{-149, 220, -514, 783, 111, -205, -384, -180, 112, 138, 283, 20, 925, 3, 214, -230}, '{346, 249, 504, 383, -148, 249, 16, -715, 217, -391, 283, 246, -1102, 274, 325, 315}, '{291, -261, 69, -294, 65, -334, 28, 162, -331, -54, -146, 270, -38, 194, -260, 33}, '{345, 150, -415, -157, 327, -77, -754, 306, -105, -205, -197, 747, -355, -285, 86, 227}, '{175, 51, -363, -139, 177, 8, 159, 214, 143, -156, -169, -127, -16, -77, -67, -7}, '{222, -242, 179, -348, 24, -321, 340, -299, -197, 233, 186, 277, 97, -317, -247, 241}, '{574, 458, -186, 417, -15, 307, 418, 385, -89, 411, 416, -349, -2048, -13, 224, 35}, '{212, -470, 2020, 927, -618, -25, 322, 191, -34, -43, 482, -165, -20, 21, 247, 108}, '{-662, 30, 661, -247, 121, -63, -359, 61, -52, -389, 281, 462, 1537, 83, 263, -205}, '{134, 31, 253, -273, 241, 239, -128, -344, -477, -276, -379, -312, 79, -478, 136, -615}, '{170, -346, -11, 259, -320, -278, -170, -140, -191, 309, -254, 159, -253, -114, -282, -337}}};
    logic signed [0:11] LAYER_MID_BIAS [0:0][0:15]  = '{'{-99, 28, -265, 176, 263, -2, -1, -163, 196, -337, -282, -52, -47, 5, -83, -160}};
    localparam int LAYER_MID_WEIGHT_QUANTIZER [0:0]  = '{-11};
    localparam int LAYER_MID_ACT_QUANTIZER [0:0]  = '{-11};
    localparam int LAYER_MID_OUT_QUANTIZER [0:0]  = '{-15};
    logic signed [0:11] LAYER_LAST_WEIGHT [0:1][0:67]  = '{'{-263, 464, -542, -392, -262, -292, -718, 76, 264, -261, -317, 411, 265, -123, 193, 326, -135, -218, -46, 487, -192, 443, -284, 345, 457, -212, 31, 130, 459, -27, 825, -188, -298, 269, -40, 66, -50, 43, -123, 167, 477, -8, -145, 271, -91, -253, 161, 224, 213, 339, 328, -297, 157, 300, -197, 141, -47, 85, 404, 37, -79, -35, 102, -171, 280, -298, -171, 181}, '{171, 152, 38, -205, 12, 489, -170, -5, 210, -184, 34, 183, 1101, -195, -228, 11, -516, 528, 106, -156, 422, -590, -759, 274, -132, -466, -138, 1052, -571, 444, -481, -126, 70, 45, -110, 13, 170, 52, 172, 47, -395, -84, 161, -26, -168, 76, -198, 14, -72, -390, -111, -82, -130, 123, 40, -241, -210, 160, 255, 54, 10, -148, 73, -144, -3, -85, -46, 112}};
    logic signed [0:11] LAYER_LAST_BIAS [0:1]  = '{-71, -70};
    localparam int LAYER_LAST_WEIGHT_QUANTIZER   = -11;
    localparam int LAYER_LAST_ACT_QUANTIZER   = -11;
    localparam int LAYER_LAST_OUT_QUANTIZER   = -15;
    localparam string LAYER_TYPES [1:BACKBONE_LAYERS+1] = '{"INT_LINEAR", "INT_LINEAR", "INT_LINEAR"};
    // The names of the layers are: BACKBONE.FC_HID.0, BACKBONE.FC_HID.1, BACKBONE.FC_OUT;
    localparam int LAYER_ORDER [0:BACKBONE_LAYERS+1] = {0, 1, 2, 3}; // The order of the layers in LAYER_NAMES
        // IMPORTANT: the order of the layers in the code of the backbone is detemined based on what is defined first in the backbone,
        // make sure that this order is correct, or change the backbone if needed
endpackage
